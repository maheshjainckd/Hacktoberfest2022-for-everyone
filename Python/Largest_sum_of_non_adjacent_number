mport sys
 
 
# Function to calculate the maximum sum in a given list
# with no adjacent elements considered
# `i` ——> index of the current element
# `prev` ——> index of the previous element included in the sum
def findMaxSumSubsequence(nums, i, n, prev=-sys.maxsize):
 
    # base case: all elements are processed
    if i == n:
        return 0
 
    # recur by excluding the current element
    excl = findMaxSumSubsequence(nums, i + 1, n, prev)
 
    incl = 0
 
    # include current element only if it's not adjacent to
    # the previous element
    if prev + 1 != i:
        incl = findMaxSumSubsequence(nums, i + 1, n, i) + nums[i]
 
    # return maximum sum we get by including or excluding
    # current item
    return max(incl, excl)
 
 
if __name__ == '__main__':
 
    nums = [1, 2, 9, 4, 5, 0, 4, 11, 6]
    print('The maximum sum is', findMaxSumSubsequence(nums, 0, len(nums)))
 
Download  Run Code

#Output:
#
#The maximum sum is 26
